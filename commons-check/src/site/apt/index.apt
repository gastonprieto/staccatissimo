About Staccato-Commons-Check
 
 Staccato-Commons-Check is the validation and restrictions documentation library of the {{{http://staccatocommons.sourceforge.net}Staccato-Commons project}}. 
It offers classes for performing flexible, generic preconditions and postconditions and domain-specific validations, and 
annotations for documenting simple constraints.   

 Please notice Staccato-Commons-Check is a validation API targeted for implementing defensive programming, like validation 
classes you can find in {{{http://commons.apache.org/lang/}Apache Commons Lang}}
or {{{http://code.google.com/p/guava-libraries/}Guava}}. It is by no means a conversion an validation 
API like {{{http://commons.apache.org/validator/}Apache Commons Validator}}    
 
Alpha state 

 Staccato-Commons-Check is currently in alpha state. Although most of previous features are implemented, tested and documented, it is not recommended to use in production systems yet. Types and packages may change in the near future without notice.  
 
Getting started
 
 Staccato-Commons-Check exposes two APIs
  
  * Check. A validation API designed for being rich, easy to use, flexible, extensible, and general purpose. 
  
  * Check-Annotation. A annotations API for documenting simple constraints that extends the Staccato-Commons-Lang restrictions API.
  
* Validation API 

 Its core is the <<<net.sf.staccatocommons.check.Check\<E\>>>> class. It implements more than 40 common checks with automatic
error messages building, in a method-chaining fashion. For example, the following, the following code will check that <<<bar != null && foo.compareTo(bar) <= 0 && baz.size() == 1 && baz.contains(foo)>>>, 
throwing an exception and generating a proper message if any of the constraints is violated: 

+--
   Check<... more about this parametrization later ...> check = ...obtain a reference to a check...
   check.isNotNull("bar", bar)
        .isGreaterThan("foo", foo, bar)
        .isSize("baz", baz, 1)
        .contains("baz", baz, foo);

+-- 

 It is easy to see that all automatic check methods take at least two arguments: a mnemonic for the object - normally the variable 
 or attribute name - and the object to check. It is not necessary to pass any extra message, as all the invocation have enough information
 to generate them.

 In addition to this checks, it offers general boolean condition tests and forced failures methods. For example:

+----
 
  check.that(account.hasEnoughFonds(),  "Account %s must have enough fonds", account);
  
  check.failure("Code should not have reached here");

+--- 
 
 Those methods take at least a <<<message>>> argument, as they have no enough information to construct one.  
 
 Check class, however, is abstract, and does not define the specific exception to be thrown on failure.  
It is parameterized instead by the exception type it throws, and is responsibility of subclasses to define that.

 To address that, the API provides three concrete implementations of <<<Check>>>:
 
 * <<<Ensure>>> Throws <<<java.lang.IllegalArgumentException>>>, and is used to check generic preconditions
 
 * <<<Assert>>> Throws <<<java.lang.AssertionError>>>, and denotes is used to check generic postconditions and invariants.
 
 * <<<Validate>>> Throws a exceptions of any given type - in particular, they do not need to be <<<java.lang.RuntimeException>>>s.
It is used to perform domain specific validations.  

<<<TODO>>>
   

* Documentation API - <<<net.sf.staccatocommons.check.annotation>>>

 <<TODO>>  
  
What is next?

 * Navigate the {{{http://staccatocommons.sourceforge.net/staccatissimo/commonscheck/apidocs/index.html}API javadoc}}
 
 * Explore the rest of Staccato-Commons projects. They extensively use Staccato-Commons-Check
 
 * Have a look to the {{{http://staccatocommons.sourceforge.net/staccatissimo/commonscheckinstrument/}Staccato-Commons-Check-Instrument}} API,
which in many cases completely eliminates the need of writing checks code.      

Road map

 Staccato-Commons-Check is in continuous development. Next releases are focused on augmenting extensibility and richness of both APIs.