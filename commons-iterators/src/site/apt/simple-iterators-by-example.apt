~~
~~  Copyright (c) 2011, The Staccato-Commons Team
~~
~~  This program is free software; you can redistribute it and/or modify
~~  it under the terms of the GNU Lesser General Public License as published by
~~  the Free Software Foundation; version 3 of the License.
~~
~~  This program is distributed in the hope that it will be useful,
~~  but WITHOUT ANY WARRANTY; without even the implied warranty of
~~  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
~~  GNU Lesser General Public License for more details.
~~

Simple Iterators by example

* Introduction 
 
 Simple Iterators are a small library of reusable standalone iterators and iterator wrappers, that implement common, simple, 
 iteration strategies. The main benefit of such iterators over other libraries that expose similar functionality is that they are 
 dependency-lightweight, well integrated with staccato-commons interfaces, but not being tied to any collections library. 
 
 All those simple iterators are also thriters, allowing them to be used lazily.   
  
* Examples 

** Empty iterator

+--
  //An iterator that has no elements
  Thriterator<Tax> taxesIter = Thriterators.empty();
  taxesIter.hasNext(); //Always false
  taxesIter.isEmpty(); //Always true
  taxesIter.next(); //always throws a NoSuchElementException
+---

** Single element iterator

+--
  
  //An iterator that returns the given element once
  Thriterator<Integer> iter = Thriterators.from(50);
  iter.hasNext(); //true
  iter.next(); //50
  iter.hasNext(); //false
  
+--

** Undefined Iterator (iterator that throws an exception)

+--  
  //An iterator that has only one element, and
  //that throws an exception 
  Thriterator<Integer> iter = Thriterators.undefined();
  iter.hasNext(); //true
  try{ 
    iter.next();  /*throws an exception*/
  }catch(RuntimeExeption e) { /*ignore*/ }
  iter.hasNext(); //false
+--

~~** Appended and Prepend iterators
~~ TODO
~~** Delayed Iterators
~~TODO 
~~** Next-Get Iterators 
~~ TODO