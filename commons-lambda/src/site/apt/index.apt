About Staccato-Commons-Lambda 
 
 Staccato-Commons-Lambda is a minimalistic and lightweight library for instantiating simple Staccato-Commond-Defs'
Functions and Evaluables in a DSL style, without using anonymous classes. This project is aimed to simplify higher-order programming 
within Staccato-Commons until Java adds lambdas to its language (planned for Java 8) 

Alpha state 

 Staccato-Commons-Lambda is currently in alpha state.
 Although most of previous features are implemented, tested and documented, it is 
 not recommended to use in production systems yet. Types and packages may change in the near future without notice.
 
Getting Started

 The entry point to Staccato-Commons-Lambda is the <<<Lambda>>> class, which allows to create functions in a concise and redable way. 
 There are two ways of using it, this introduction will just show one of them - using a shared lambda factory. The alternative, 
 more performant but a bit more verbose way - using local lambda factories - is discussed in the API docs. 
 
 * Instantiating 1 argument function     
 
 The simplest function to create are one argument functions. Without Staccato-Commons-Lambda, implementing such functions require to extend
 AbstractFunction. For example, a function that return book's ISBN looks like the following:
 
+---
  new AbstractFunction<Book, String>() {
    public String apply(@NonNull Book book){
        return book.getIsbn();
    }  
  };  
+--

 Which is OK, but is far from being the panacea. In particular, it is not too readable. This can be improved statically importing Lambda:

+--
  lambda($(Book.class).getIsbn()); 
+--- 
 
  Which is although odd at first glance, is much more intention revealing. 
  
~~ Functions that can be instantiated using this syntax are not restricted to getters, for example:
~~TODO    
  
  