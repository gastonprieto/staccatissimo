Un equals builder y haschode builder que cacheen la estrategia


Consistent toString implementation across all classes.

Consistent factory method policy

Consistent no null annotation/javadoc/ensuring/post processing policy

Move collection-view related code to collections

Add randomizing capabilities to Streams

Consisten inner classes vs annonymus classes policy. 
Think about serialization. Think about method hubs/class factories. -> thumb rule is always create top level classes, in order 
to simplify debugging (better to string) and serialization throug reflection.

Check injection disabling ?

Check injection with class retention?, except of CheckAnnotation, which is just source

produce warning when applying NonNull to primitives

be compliant with http://www.ietf.org/rfc/rfc2119.txt meanings of must, should and may


transparential reference in OO?


return a + b is TR. 
return a.size() is TR?

TODO log checks added, see final classes, check is the validation of voids is working or not


Anotar solo metodos publicos, de clases publicas, en paquetes no-internal

ToString se sobrentiende que es non-null, idem clone


serialization? Perhaps should remove that capaibility for non concrete classes, as it is error prone and does not offer a big help

Annotations for unmodiables


Tasks

1. Increase test coverage
2. Increase  javadoc coverage
3. COmmit commons-instrument

Singleton objects? Document they are singleton?
 
 
 
 soporte en check instrument para generar warnings respecto de los elementos anotados
 
 
 Ensure.that.isTrue
 Ensure.thatNot.isTrue
 
 Desprenderse del uso de evaluables?
 