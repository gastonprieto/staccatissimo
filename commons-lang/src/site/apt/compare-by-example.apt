~~
~~  Copyright (c) 2011, The Staccato-Commons Team
~~
~~  This program is free software; you can redistribute it and/or modify
~~  it under the terms of the GNU Lesser General Public License as published by
~~  the Free Software Foundation; version 3 of the License.
~~
~~  This program is distributed in the hope that it will be useful,
~~  but WITHOUT ANY WARRANTY; without even the implied warranty of
~~  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
~~  GNU Lesser General Public License for more details.
~~

Compare

* Introduction

 {{{http://staccatocommons.sourceforge.net/commons-lang/apidocs/net/sf/staccatocommons/lang/Compare.html}Compare}}
 is an utility class with many methods and functions for performing frequent comparations between objects.   
   
* The problem        

  The JDK offers a few classes and methods for performing comparations between objects, 
  like <<<java.lang.Math.max(int, int)>>> and <<<java.lang.Comparable>>>. Such abstractions are most times not enough in real world applications,
  and developers need code a few lines of glue code once and again, or use utilities spread across several frameworks. 
  
* The Solution

  Compare offers a hub of natural ordering comparators, generic min/max/between/in methods and functions, 
  &lt;, &lt;=, &gt;, &gt;= functions, and generic, type-safe comparators based on a field.
  
  Examples:

 
+----
   import static net.sf.staccatocommons.lang.Compare.*;
   ...
   
   //Tests if  9 &lt;= x &lt;= 98
   long x = ...; 
   between(x, 9, 98);
   
   //Tests if x is lexicography between "hello" and "world"
   String x = ...;
   between(x, "hello", "world");  
   
   //Answers a predicate that tests if a calendar is between 2008-1-1 and 2015-5-10 
   between(new GregorianCalendar(2008, Calendar.JANUARY, 1), new GregorianCalendar(2015, Calendar.MAY, 10));
   
   //Answers a predicate that tests if a date is < now
   lessThan(new Date()); 
   
   //Answers the natural comparator
   natural();
   
   //Answers a comparator that orders Customer
   //objects based on its name - using staccato-commons-lambda
   on(lambda($(Customer.class).getName()));
   
   //Usage example, sort in place a list of accounts based on its bigDecimal debt.   
   List<BankAccount> accounts = ...;
   java.util.Collections.sort(accounts, on(lambda($(BankAccount.class).getDebt()));
   
   //Answers a 2-arg function that returns the lowest of its arguments
   //based on a given comparator 
   Comparator<Blog> comparator = ...;
   min(c);
   
   //Usage example - combining staccato-commons-lambda and staccato-commons-collections:
   //Get the maximum element of an iterator of Tasks, based on its priority
   
   Streams.from(tasks).reduce(max(on(lambda($(Task.class).getPriority()))));
   //equivalent to Streams.from(tasks).maximumOn( lambda($(Task.class).getPriority()) );
 
+----  
