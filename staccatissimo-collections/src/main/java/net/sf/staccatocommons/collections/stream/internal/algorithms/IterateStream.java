/**
 *  Copyright (c) 2010-2012, The StaccatoCommons Team
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation; version 3 of the License.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 */

package net.sf.staccatocommons.collections.stream.internal.algorithms;

import java.io.Serializable;
import java.util.Iterator;

import net.sf.staccatocommons.collections.stream.AbstractStream;
import net.sf.staccatocommons.defs.Applicable;
import net.sf.staccatocommons.defs.Evaluable;
import net.sf.staccatocommons.iterators.thriter.NextThriterator;
import net.sf.staccatocommons.iterators.thriter.Thriterator;
import net.sf.staccatocommons.restrictions.Conditionally;
import net.sf.staccatocommons.restrictions.check.NonNull;
import net.sf.staccatocommons.restrictions.value.Immutable;
import net.sf.staccatocommons.restrictions.value.Unmodifiable;

/**
 * A {@link IterateStream} is an {@link Iterable} object whose {@link Iterator},
 * starting with a seed value, retrieves elements generated by a
 * {@link Applicable}, until an {@link Evaluable} stop condition is satisfied.
 * 
 * Sequences are {@link Unmodifiable}, and {@link Serializable}, but
 * serialization will not be sucessfull unless seed, generator and stopCondition
 * are serializable too.
 * 
 * @author flbulgarelli
 * 
 * @param <A>
 */
@Conditionally({ Immutable.class, Serializable.class })
public class IterateStream<A> extends AbstractStream<A> implements Serializable {

  private static final long serialVersionUID = 8811454338704704525L;

  private final A seed;

  private final Applicable<? super A, ? extends A> generator;

  /**
   * 
   * Creates a new {@link IterateStream}
   * 
   * @param seed
   *          the initial value to be retrieved
   * @param generator
   *          a function used to generated each element from the sequence after
   *          the initial element
   */
  public IterateStream(A seed, @NonNull Applicable<? super A, ? extends A> generator) {
    this.seed = seed;
    this.generator = generator;
  }

  /**
   * Returns an iterator that retrieves the values generated by
   * {@link #getGenerator()}, starting by {@link #getSeed()}, and until
   * {@link #getStopCondition()} evaluates to true.
   * 
   * There are therr particular cases of the previous definition:
   * <ul>
   * <li>An <em>infinite</em> iterator - if the stop condition is in practice
   * never met, that is, if this predicate evaluates to false always, or until
   * all system resources have been consumed</li>
   * <li>An <em>empty</em> iterator - if the stop condition is true for the seed
   * <li>A non-empty, finite iterator - if the stop condition is true for at
   * least one generated element, and false for the seed</li>
   * </ul>
   * 
   * @return a new sequencing iterator over the generated values
   */
  @Override
  public Thriterator<A> iterator() {
    return new NextThriterator<A>() {
      private A next = seed;

      @Override
      public boolean hasNext() {
        return true;
      }

      @Override
      protected A nextImpl() {
        A next = this.next;
        this.next = generator.apply(next);
        return next;
      }

    };
  }

}